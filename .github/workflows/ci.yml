name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-specification:
    runs-on: ubuntu-latest
    name: Validate Specification Documents
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install -g markdownlint-cli
        npm install -g cspell
    
    - name: Lint Markdown files
      run: markdownlint docs/**/*.md *.md governance/**/*.md tests/**/*.md reference-impl/**/*.md --config .markdownlint.yml || true
    
    - name: Spell check
      run: cspell "**/*.md" --config .cspell.json || true
    
    - name: Validate JSON examples in documentation
      run: |
        echo "Validating JSON examples in markdown files..."
        # This is a basic validation - more sophisticated tooling can be added later
        python3 -c "
import json
import re
import glob
import sys

def validate_json_in_file(filepath):
    with open(filepath, 'r') as f:
        content = f.read()
    
    # Find JSON code blocks
    json_blocks = re.findall(r'```json\n(.*?)\n```', content, re.DOTALL)
    
    for i, block in enumerate(json_blocks):
        try:
            json.loads(block)
            print(f'✓ Valid JSON block {i+1} in {filepath}')
        except json.JSONDecodeError as e:
            print(f'✗ Invalid JSON block {i+1} in {filepath}: {e}')
            return False
    return True

success = True
for filepath in glob.glob('**/*.md', recursive=True):
    if not validate_json_in_file(filepath):
        success = False

print('JSON validation completed')
"

  test-reference-implementation:
    runs-on: ubuntu-latest
    name: Test Reference Implementation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for reference implementation
      run: |
        echo "Checking reference implementation status..."
        if [ -f "reference-impl/package.json" ]; then
          echo "Reference implementation package.json found - running tests"
          cd reference-impl
          npm ci
          npm test
        else
          echo "Reference implementation not yet complete - skipping tests"
          echo "This is expected for early development phases"
        fi

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: 0  # Don't fail the build on vulnerabilities in documentation

  compliance-check:
    runs-on: ubuntu-latest
    name: Compliance Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for required files
      run: |
        echo "Checking for required project files..."
        
        files=("README.md" "LICENSE.md")
        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file $file is missing"
            exit 1
          else
            echo "✅ Found required file: $file"
          fi
        done
    
    - name: Check for governance structure
      run: |
        echo "Checking governance structure..."
        
        if [ ! -d "governance" ]; then
          echo "❌ Governance directory is missing"
          exit 1
        else
          echo "✅ Governance directory exists"
        fi
        
        governance_files=("GOVERNANCE.md" "CONTRIBUTING.md" "IP-POLICY.md")
        for file in "${governance_files[@]}"; do
          if [ ! -f "governance/$file" ]; then
            echo "❌ Governance file governance/$file is missing"
            exit 1
          else
            echo "✅ Found governance file: governance/$file"
          fi
        done
        
    - name: Check specification structure
      run: |
        echo "Checking specification structure..."
        
        if [ ! -f "docs/specification/specification.md" ]; then
          echo "❌ Main specification file is missing"
          exit 1
        else
          echo "✅ Main specification file exists"
        fi
        
        if [ ! -d "tests" ]; then
          echo "❌ Tests directory is missing"
          exit 1
        else
          echo "✅ Tests directory exists"
        fi
        
        echo "✅ All compliance checks passed"
